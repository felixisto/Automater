/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package automater.ui.view;

import automater.TextValue;
import automater.utilities.Callback;
import automater.utilities.SimpleCallback;
import automater.utilities.StringFormatting;
import automater.mutableaction.MutableActionType;
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListDataListener;
import automater.mutableaction.BaseMutableAction;

/**
 *
 * @author Bytevi
 */
public class EditMacroActionDialog extends javax.swing.JDialog {
    // UI callbacks
    public SimpleCallback onCancelButtonCallback = SimpleCallback.createDoNothing();
    public SimpleCallback onSaveButtonCallback = SimpleCallback.createDoNothing();

    public Callback<Integer> onTypeChangedCallback = Callback.createDoNothing();
    
    public SimpleCallback onHotkeyButtonCallback = SimpleCallback.createDoNothing();
    public SimpleCallback onPressCheckCallback = SimpleCallback.createDoNothing();
    
    /**
     * Creates new form EditMacroActionDialog
     */
    public EditMacroActionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typesDropdown = new javax.swing.JComboBox<>();
        panel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();
        timeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        typesDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        typesDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typesDropdownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("Status");

        timeField.setText("0");

        timeLabel.setText("Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(typesDropdown, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(timeLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 248, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typesDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        onSaveButtonCallback.perform();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        onCancelButtonCallback.perform();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        onCancelButtonCallback.perform();
    }//GEN-LAST:event_formWindowDeactivated

    private void typesDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typesDropdownActionPerformed
        int index = typesDropdown.getSelectedIndex();
        
        if (_selectedTypeIndex != index)
        {
            onTypeChangedCallback.perform(index);
        }
    }//GEN-LAST:event_typesDropdownActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditMacroActionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditMacroActionDialog dialog = new EditMacroActionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void setup() {
        this.setTitle(TextValue.getText(TextValue.EditAction_DialogTitle));
        
        cancelButton.setText(TextValue.getText(TextValue.EditAction_CancelButtonTitle));
        saveButton.setText(TextValue.getText(TextValue.EditAction_SaveButtonTitle));
        
        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusDefault));
        
        timeLabel.setText(TextValue.getText(TextValue.EditAction_Time));
    }
    
    // # Public
    
    public void setTypesDropdownModel(StandartDescriptionsDataSource dataSource)
    {
        _actionTypesModel = new EditMacroActionTypesModel(dataSource);
        typesDropdown.setModel(_actionTypesModel);
    }
    
    public void selectDropdownType(int index)
    {
        if (index < 0 || index >= _actionTypesModel.getSize())
        {
            return;
        }
        
        _selectedTypeIndex = index;
        
        typesDropdown.setSelectedIndex(index);
    }
    
    public void setMutableAction(BaseMutableAction mutableAction)
    {
        _mutableAction = mutableAction;
        
        setupMutableAction();
    }
    
    public void startHotkeyListening()
    {
        updateSaveButtonState(false);
        
        typesDropdown.setEnabled(false);
        timeField.setEnabled(false);
        
        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusListeningToHotkey));
    }
    
    public void endHotkeyListeningWithoutAnyKeyEntered()
    {
        updateSaveButtonState(true);
        
        typesDropdown.setEnabled(true);
        timeField.setEnabled(true);
    }
    
    public void endHotkeyListening(String hotkey)
    {
        endHotkeyListeningWithoutAnyKeyEntered();
        
        if (_hotkeyButton != null)
        {
            _hotkeyButton.setText(hotkey);
        }
        
        updateStateDescription();
        
        // Update value
        setHotkeyValue(hotkey);
    }
    
    public void displayError(String error)
    {
        statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusError, error));
    }
    
    // # Private
    
    private void setupMutableAction()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        // Time
        timeField.setText(String.valueOf(_mutableAction.getTimestamp()));
        timeField.setEditable(true);
        
        DocumentListener listener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateTimestampValue();
                onAnyValueChanged();
                updateSaveButtonState();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateTimestampValue();
                onAnyValueChanged();
                updateSaveButtonState();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateTimestampValue();
                onAnyValueChanged();
                updateSaveButtonState();
            }
        };
        
        timeField.getDocument().addDocumentListener(listener);
        
        // Set state description
        updateStateDescription();
        
        // Setup current panel
        clearCurrentPanel();
        
        if (_mutableAction.getType() == MutableActionType.DoNothing)
        {
            setupPickDoNothingPanel();
        }
        
        if (_mutableAction.getType() == MutableActionType.KeyboardKey)
        {
            setupPickKeyboardKeyPanel();
        }
        
        if (_mutableAction.getType() == MutableActionType.MouseKey)
        {
            setupPickMouseKeyPanel();
        }
        
        if (_mutableAction.getType() == MutableActionType.MouseMove)
        {
            setupMouseMovePanel();
        }
        
        if (_mutableAction.getType() == MutableActionType.MouseMotion)
        {
            setupMouseMovePanel();
        }
        
        // Save button
        updateSaveButtonState();
    }
    
    private void clearCurrentPanel()
    {
        panel.removeAll();
    }
    
    private void setupPickDoNothingPanel()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        EditMacroActionDoNothingPanel view = new EditMacroActionDoNothingPanel();
        
        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);
    }
    
    private void setupPickKeyboardKeyPanel()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        EditMacroActionHotkeyPanel view = new EditMacroActionHotkeyPanel();
        _hotkeyButton = view.hotkeyButton;
        
        view.onHotkeyButtonCallback = onHotkeyButtonCallback;
        
        view.onPressCheckCallback = new Callback<Boolean>() {
            @Override
            public void perform(Boolean argument) {
                _mutableAction.setSecondValue(String.valueOf(view.pressCheck.isSelected()));
                onAnyValueChanged();
                onPressCheckCallback.perform();
            }
        };
        
        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);
        
        // Setup values and their labels
        view.keyLabel.setText(_mutableAction.getFirstValueName());
        _hotkeyButton.setText(_mutableAction.getFirstValue());
        
        view.pressCheck.setSelected(Boolean.valueOf(_mutableAction.getSecondValue()));
        view.pressCheck.setText(_mutableAction.getSecondValueName());
    }
    
    private void setupPickMouseKeyPanel()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        List<String> values = _mutableAction.getPossibleSpecificValues();
        
        EditMacroActionMouseKeyPanel view = new EditMacroActionMouseKeyPanel();
        
        view.onSelectedValueCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                _mutableAction.setFirstValue(argument);
                onAnyValueChanged();
            }
        };
        
        view.onPressCheckCallback = new Callback<Boolean>() {
            @Override
            public void perform(Boolean argument) {
                _mutableAction.setSecondValue(String.valueOf(view.pressCheck.isSelected()));
                onAnyValueChanged();
                onPressCheckCallback.perform();
            }
        };
        
        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);
        
        // Setup values and their labels
        view.setSpecificValues(values);
        view.selectSpecificValue(_mutableAction.getFirstValue());
        
        view.keyLabel.setText(_mutableAction.getFirstValueName());
        
        view.pressCheck.setText(_mutableAction.getSecondValueName());
        view.pressCheck.setSelected(Boolean.valueOf(_mutableAction.getSecondValue()));
    }
    
    private void setupMouseMovePanel()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        List<String> values = _mutableAction.getPossibleSpecificValues();
        
        EditMacroActionMouseMovePanel view = new EditMacroActionMouseMovePanel();
        view.onXValueChangedCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                _mutableAction.setFirstValue(argument);
                onAnyValueChanged();
            }
        };
        view.onYValueChangedCallback = new Callback<String>() {
            @Override
            public void perform(String argument) {
                _mutableAction.setSecondValue(argument);
                onAnyValueChanged();
            }
        };
        
        panel.add(view);
        panel.setLayout(new BorderLayout());
        panel.add(view, BorderLayout.NORTH);
        
        // Setup values and their labels
        view.xLabel.setText(_mutableAction.getFirstValueName());
        view.xField.setText(_mutableAction.getFirstValue());
        view.yLabel.setText(_mutableAction.getSecondValueName());
        view.yField.setText(_mutableAction.getSecondValue());
    }
    
    private void setHotkeyValue(String value)
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        _mutableAction.setFirstValue(value);
    }
    
    private void onAnyValueChanged()
    {
        updateStateDescription();
    }
    
    private boolean isTimestampValid()
    {
        String timetamp = timeField.getText();
        
        if (!StringFormatting.isStringANonNegativeInt(timetamp))
        {
            return false;
        }
        
        if (timetamp.length() > 7)
        {
            return false;
        }
        
        return true;
    }
    
    private void updateSaveButtonState()
    {
        updateSaveButtonState(_saveButtonShouldBeEnabled);
    }
    
    private void updateSaveButtonState(boolean enabled)
    {
        _saveButtonShouldBeEnabled = enabled;
        
        if (!isTimestampValid())
        {
            saveButton.setEnabled(false);
            return;
        }
        
        saveButton.setEnabled(_saveButtonShouldBeEnabled);
    }
    
    private void updateTimestampValue()
    {
        if (_mutableAction == null)
        {
            return;
        }
        
        if (!isTimestampValid())
        {
            return;
        }
        
        // Update value
        long timestamp = Long.parseLong(timeField.getText());
        
        _mutableAction.setTimestamp(timestamp);
    }
    
    private void updateStateDescription()
    {
        if (_mutableAction == null)
        {
            statusLabel.setText("");
            return;
        }
        
        if (!isTimestampValid())
        {
            statusLabel.setText(TextValue.getText(TextValue.EditAction_StatusError, "Invalid time!"));
            return;
        }
        
        statusLabel.setText(_mutableAction.getStateDescription());
    }
    
    private int _selectedTypeIndex = 0;
    private boolean _saveButtonShouldBeEnabled = true;
    private EditMacroActionTypesModel _actionTypesModel;
    private BaseMutableAction _mutableAction;
    
    private JButton _hotkeyButton;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel panel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField timeField;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JComboBox<String> typesDropdown;
    // End of variables declaration//GEN-END:variables
}

class EditMacroActionTypesModel implements ComboBoxModel {
    public final StandartDescriptionsDataSource dataSource;
    
    private int _selectedIndex = 0;
    
    public EditMacroActionTypesModel(StandartDescriptionsDataSource dataSource)
    {
        this.dataSource = dataSource;
    }
    
    @Override
    public void setSelectedItem(Object anItem) 
    {
        int index = dataSource.indexOf((String)anItem);
        _selectedIndex = index;
    }

    @Override
    public Object getSelectedItem() 
    {
        if (_selectedIndex == -1)
        {
            return null;
        }
        
        return dataSource.getElementAt(_selectedIndex);
    }

    @Override
    public int getSize()
    {
        return dataSource.getSize();
    }

    @Override
    public Object getElementAt(int index)
    {
        return dataSource.getElementAt(index);
    }

    @Override
    public void addListDataListener(ListDataListener l)
    {
        
    }

    @Override
    public void removeListDataListener(ListDataListener l)
    {
        
    }
}
